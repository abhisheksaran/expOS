//stage 11
breakpoint;
//TIMER INTERRUPT
//save the current value of SP into corresponding Process Table entry.
[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13]=SP;

//Set the SP to the beginning of the kernal stack= uAreaPageNo *512-1
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+11]*512-1;

//save the user context to the kernal stack using Backup instuction
backup;

//print "TIMER"; 

 //obtain the currently executing process from system status table
 alias currentPID R0;
 currentPID=[SYSTEM_STATUS_TABLE+1];



//save the KPTR,PTBR AND PTLR values to the process table of the current process.

alias process_table_entry R1;
process_table_entry=PROCESS_TABLE+currentPID*16;

[process_table_entry+12]=SP%512;
//(Note that instead of saving the actual value of KPTR, we are saving KPTR%512. This is because the OS design stipulates that KPTR must contain the offset of the kernel stack pointer within the User Area Page. This is done so as to allow the OS to relocate the User Area Page if necessary.)

[process_table_entry+14]=PTBR;
[process_table_entry+15]=PTLR;

[process_table_entry+4]=READY;



//as we have only two processes to schedule, the scheduling algo is just toggle between the two processes.
alias newPID R2;
if(currentPID==0) then
	newPID=1;
else
	newPID=0;
endif;



//restore the SP,PTBR and PTLR values.
alias new_process_table R3;
new_process_table=PROCESS_TABLE+newPID*16;

//set back kernal SP, PTBR, PTLR
SP=[new_process_table+11]*512+[new_process_table+12];
PTBR=[new_process_table+14];
PTLR=[new_process_table+15];

//set the PID field of the system status table as newPID
[SYSTEM_STATUS_TABLE+1]=newPID;

//(Our scheduler must distinguish between two cases when a process is scheduled for execution. If a process is in CREATED state, the process had never been scheduled for execution earlier. Such a process will have no "history" to remember, and thus no "user context" to be restored before being scheduled. On the other hand, a process in READY state is one which had been in RUNNING state in the past. Such a process will have an associated (saved user context) which the scheduler would have saved in the kernel stack when it was scheduled out earlier. This context has to be restored before the process is scheduled again for correct resumption of execution.
//Check if the newly found process is in CREATED state. If so, set SP to top of its user stack and return to user mode.)

if([new_process_table+4]==CREATED) then
	[new_process_table+4]=RUNNING;
	SP=[new_process_table+13];
	ireturn;
endif;

//(In this stage, the only situation where the timer finds the next process in CREATED state is when the IDLE process is to be scheduled for the first time. Since INIT is scheduled directly from the OS startup code, the INIT process never goes through the CREATED state. )
 
 [new_process_table+4]=RUNNING;
 

//Restore the user register context of the new process from the Kernal stack and set SP to the user SP.    Note that if this is the case, then the process would have been in RUNNING state before.
//saved in process table,before returning to user mode.

restore;
SP=[PROCESS_TABLE+([SYSTEM_STATUS_TABLE+1]*16)+13];

breakpoint;
ireturn;

