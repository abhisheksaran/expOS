//breakpoint;
loadi(4,17);//timer interpt load in mem page 4 and 5
loadi(5,18);
loadi(65,7);//load init process from blocks 7-8 of disk to the memory pages 65,66
loadi(66,8);
loadi(63,13);//load library code from disk to memory
loadi(64,14);
loadi(22,35);//INT10 module from disk to memory
loadi(23,36);
loadi(2, 15);//exception handler routine from disk to memory
loadi(3, 16);
loadi(16,29);//load INT 7 from disk to memory - stage 10.
loadi(17,30);
loadi(50,63);//load module 5, scheduler
loadi(51,64);
loadi(40,53);//load moudle 0, resource manager
loadi(41,54);
loadi(48,61);//load module 4, device manager 
loadi(49,62);
loadi(14,27);//load INT 6
loadi(15,28);
loadi(8,21);//load console INT 3
loadi(9,22);
loadi(42,55);//load module 1, process module
loadi(43,56);
loadi(44,57);//load moudle 2, memory module
loadi(45,58);
loadi(20,33);//load INT 9, EXEC
loadi(21,34);
loadi(59,3);//load  Inode Table
loadi(60,4);
loadi(6,19);//load disk interrupt 
loadi(7,20);
loadi(61,2);//load disk free list

[TERMINAL_STATUS_TABLE]=0;//intially terminal is free
[DISK_STATUS_TABLE]=0;
[SYSTEM_STATUS_TABLE+3]=0;//wait mem count
alias count R0;
count=0;
while(count<128) do
	[MEMORY_FREE_LIST+count]=0;
	if(count<=75) then
		[MEMORY_FREE_LIST+count]=1;
	endif;
	count=count+1;
endwhile;

[MEMORY_FREE_LIST+80]=1;
[MEMORY_FREE_LIST+81]=1;
[MEMORY_FREE_LIST+82]=1;


[SYSTEM_STATUS_TABLE+2]=128-83;//mem free count

//setting page table entries for init process
PTBR = PAGE_TABLE_BASE+20; //modification in stage 12
PTLR = 10;

//library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";
//Heap
[PTBR+4] = 78;
[MEMORY_FREE_LIST+78]=1;
[DISK_MAP_TABLE+10+2]=-1; //intializing disk map table
[PTBR+5] = "0110";
[PTBR+6] = 79;
[MEMORY_FREE_LIST+79]=1;
[DISK_MAP_TABLE+10+3]=-1;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[DISK_MAP_TABLE+10+4]=7;
[PTBR+10] = 66;
[PTBR+11] = "0100";
[DISK_MAP_TABLE+10+5]=8;
[PTBR+12] = -1;
[PTBR+13] = "0000";
[DISK_MAP_TABLE+10+6]=-1;
[PTBR+14] = -1;
[PTBR+15] = "0000";
[DISK_MAP_TABLE+10+7]=-1;

//Stack
[PTBR+16] = 76;
[MEMORY_FREE_LIST+76]=1;
[DISK_MAP_TABLE+10+8]=-1;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[MEMORY_FREE_LIST+77]=1;
[DISK_MAP_TABLE+10+9]=-1;
[PTBR+19] = "0110";

//stage 9 ,Set User Area Page number, UPTR, KPTR, PTBR and PTLR fields in the Process Table entry for init.
[PROCESS_TABLE+16+11]=80;//ince the first available free page is 80, the User Area page for init process is allocated at the physical page number 80.

count=0;
while(count<8) do
	[80*512+RESOURCE_TABLE_OFFSET+2*count]=-1;
	count=count+1;
endwhile;


[PROCESS_TABLE+16+12]=0;//The KPTR field must store the offset of the kernel stack pointer within this user area page. 

[PROCESS_TABLE+16+13]=8*512;//logical address of userSP,The UPTR points to the top of the current value of user stack pointer.

[PROCESS_TABLE+16+1]=1;//SET PID = 1 for init process AS it's second PROCESS.

[PROCESS_TABLE+16+4]=CREATED;//init proces, INIT will not be scheduled immedietely, as the idle process is going to be scheduled first

[PROCESS_TABLE+16+14]=PAGE_TABLE_BASE+20;//Set the PTBR field to PAGE_TABLE_BASE+20 and PTLR field to 10 in the Process Table entry of idle process.

[PROCESS_TABLE+16+15]=10;


//(This is the address of the first instruction to be executed when the program is run. Hence, you must initialise IP to the second word in the header. Since the first code page is loaded into memory page 65, the address of the second word in header is calculated as (65 * 512) + 1. This value is stored to the top of the user stack. The machine on executing IRET instructions pops this value from the stack and sets IP to that value. )
//Transfer the entry point value from the header of the INIT process to the top of the user stack of the INIT process,
[76*512]=[65*512+1];


[PROCESS_TABLE+16*2+4]=TERMINATED;
[PROCESS_TABLE+16*3+4]=TERMINATED;
[PROCESS_TABLE+16*4+4]=TERMINATED;
[PROCESS_TABLE+16*5+4]=TERMINATED;
[PROCESS_TABLE+16*6+4]=TERMINATED;
[PROCESS_TABLE+16*7+4]=TERMINATED;
[PROCESS_TABLE+16*8+4]=TERMINATED;
[PROCESS_TABLE+16*9+4]=TERMINATED;
[PROCESS_TABLE+16*10+4]=TERMINATED;
[PROCESS_TABLE+16*11+4]=TERMINATED;
[PROCESS_TABLE+16*12+4]=TERMINATED;
[PROCESS_TABLE+16*13+4]=TERMINATED;
[PROCESS_TABLE+16*14+4]=TERMINATED;

[PROCESS_TABLE+16*15+4]=TERMINATED;

//return from moudle to OS startup code using return statement in SPL.
//breakpoint;

return;
