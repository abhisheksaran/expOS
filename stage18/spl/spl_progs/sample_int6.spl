//stage 16
//breakpoint;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 7;
alias userSP R0;
userSP = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;

//According to system call conventions, userSP - 4 is the location of the argument 1. So we will manually address translate userSP - 4 

alias physicalPageNum R1;
alias offset R2;
alias fileDescPhysicalAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];



// Calculate physical address of the argument 2 and extract the value from it , which is the word to be printed to the console. 

//Write the word to the terminal using the print instruction.

//Set the return value as 0 indicating success. According to system call convention, return value is stored at memory location userSP -1 in the user stack. 

if (fileDescriptor != -1)
then
	 alias physicalAddrRetVal R5;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;
else 
	
	//print word; 
	multipush(R0,R1,R2,R3,R4,R5);
	alias functionNumber R1; 
	alias currentPID R2;
	alias word R3;
	word = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
	functionNumber=4;
	currentPID=[SYSTEM_STATUS_TABLE+1];
	//  breakpoint;
	call MOD_4;//device manager module
	//breakpoint;
	//multipop (R0);
	multipop(R0,R1,R2,R3,R4,R5);
	
	alias physicalAddrRetVal R6;
	physicalAddrRetVal = ([PTBR + 2 * (userSP - 1)/ 512] * 512) + ((userSP - 1) % 512);
	[physicalAddrRetVal] = 0;
endif;


//Outside the else block, set back the value of SP to point to top of user stack. 
 SP = userSP;
//Reset the MODE FLAG field in the process table to 0. Value 0 indicates that process is running in user mode. 
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;
//Pass control back to the user program using the ireturn statement. 
//breakpoint;
ireturn;
