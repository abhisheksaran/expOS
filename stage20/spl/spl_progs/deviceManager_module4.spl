//breakpoint;
alias funcNum R1;
alias currentPID R2;

if(funcNum==2) then
	multipush(R1,R2,R3,R4);
	R1=3;
	R2=currentPID;
	call MOD_0;//call acquire disk in resource manager module
	multipop(R1,R2,R3,R4);

	alias pageNumber R3;
	alias blockNumber R4;
	
	[DISK_STATUS_TABLE+0]=1;
	[DISK_STATUS_TABLE+1]=0;
	[DISK_STATUS_TABLE+2]=pageNumber;
	[DISK_STATUS_TABLE+3]=blockNumber;	
	[DISK_STATUS_TABLE+4]=currentPID;
	//breakpoint;
	load(pageNumber,blockNumber);
	[PROCESS_TABLE+currentPID*16+4]=WAIT_DISK;
	multipush(R1,R2,R3,R4);		
	call MOD_5;
	multipop(R1,R2,R3,R4);
	return ;
endif;	

if(funcNum==3) then   
	//caling acquire terminal
	multipush(R1,R2,R3);
	R1=8;
	R2=currentPID;
	call MOD_0;
	//multipop(R0); BIG MISTAKE
	multipop(R1,R2,R3);
	//print word
	alias word R3;
	print word;
	//caling release terminal	
	multipush(R1,R2,R3);
	R1=9;
	R2=currentPID;
	call MOD_0;
	//multipop(R0);
	multipop(R1,R2,R3);
	//breakpoint;	
	return;
endif;
if(funcNum==4) then   
	//caling acquire terminal
	multipush(R1,R2,R3);
	R1=8;
	R2=currentPID;
	call MOD_0;
	//multipop(R0); BIG MISTAKE
	multipop(R1,R2,R3);
	//read word
	read;
	[PROCESS_TABLE+currentPID*16+4]=WAIT_TERMINAL;
	//invoking scheduler module 5
	multipush(R1,R2,R3);
	call MOD_5;
	multipop(R1,R2,R3);
	alias word R3;
	alias physicalAddr R4;
	physicalAddr =([PTBR +2*(word/512)]*512) + word%512;
	[physicalAddr]=[PROCESS_TABLE+currentPID*16+8];
	//breakpoint;	
	return;
endif;
return;
